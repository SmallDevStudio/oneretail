import connetMongoDB from "@/lib/services/database/mongodb";
import Coupons from "@/database/models/Coupons/Coupons";
import UsedCoupon from "@/database/models/Coupons/UsedCoupon";
import Point from "@/database/models/Point";
import Coins from "@/database/models/Coins";
import sendLineMessage from "@/lib/sendLineMessage";

export default async function handler(req, res) {
  const { method } = req;
  await connetMongoDB();

  switch (method) {
    case "POST":
      try {
        const { userId, code } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ coupon ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô active
        const coupon = await Coupons.findOne({ code, active: true });
        if (!coupon) {
          return res
            .status(400)
            .json({ success: false, message: "Coupon not found or inactive" });
        }

        const now = new Date();
        if (now < coupon.start_date || now > coupon.end_date) {
          return res.status(400).json({
            success: false,
            message: "‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß",
          });
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• usedcoupon ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ
        const usedCoupons = await UsedCoupon.find({ code, isUsed: true });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        const amountLeft = coupon.stock - usedCoupons.length;
        if (amountLeft <= 0) {
          return res
            .status(400)
            .json({ success: false, message: "‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß" });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (coupon.repeatable === false) {
          const alreadyUsed = await UsedCoupon.findOne({
            userId,
            code,
            isUsed: true,
          });
          if (alreadyUsed) {
            return res.status(400).json({
              success: false,
              message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß",
            });
          }
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å UsedCoupon ‡πÉ‡∏´‡∏°‡πà
        const newUsedCoupon = await UsedCoupon.create({
          userId,
          code,
          isUsed: true,
        });

        if (coupon.point > 0) {
          const pointEntry = new Point({
            userId,
            description: `Claimed coupon: ${coupon.code}`,
            contentId: newUsedCoupon._id,
            path: "coupons",
            type: "earn",
            point: coupon.point,
          });
          await pointEntry.save();

          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° + ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ LINE
          const message = `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${coupon.point} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á üéâ`;
          sendLineMessage(userId, message);
        }

        if (coupon.coin > 0) {
          const coinsEntry = new Coins({
            userId,
            description: `Claimed coupon: ${coupon.code}`,
            contentId: newUsedCoupon._id,
            path: "coupons",
            type: "earn",
            coins: coupon.coins,
          });
          await coinsEntry.save();

          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° + ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ LINE
          const message = `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${coupon.coins} coins ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á üéâ`;
          sendLineMessage(userId, message);
        }

        res.status(201).json({
          success: true,
          message: "Coupon claimed successfully",
          data: newUsedCoupon,
          point: coupon.point,
          coin: coupon.coin,
        });
      } catch (error) {
        res.status(500).json({ success: false, message: error.message });
      }
      break;

    default:
      res.status(400).json({ success: false, message: "Method not allowed" });
      break;
  }
}
